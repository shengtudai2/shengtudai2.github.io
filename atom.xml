<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://shengtudai2.github.io</id>
    <title>shengtudai2</title>
    <updated>2022-08-05T01:51:56.743Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://shengtudai2.github.io"/>
    <link rel="self" href="https://shengtudai2.github.io/atom.xml"/>
    <subtitle>HOME PAGE</subtitle>
    <logo>https://shengtudai2.github.io/images/avatar.png</logo>
    <icon>https://shengtudai2.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, shengtudai2</rights>
    <entry>
        <title type="html"><![CDATA[DGL创建保存图]]></title>
        <id>https://shengtudai2.github.io/post/dglCreatSaveGraph/</id>
        <link href="https://shengtudai2.github.io/post/dglCreatSaveGraph/">
        </link>
        <updated>2022-08-03T06:43:24.000Z</updated>
        <content type="html"><![CDATA[<h1 id="dgl创建保存图">DGL创建保存图</h1>
<h2 id="节点特征">节点特征</h2>
<ul>
<li>染色质开放性特征</li>
<li>基因序列特征</li>
<li>基因表达量特征</li>
</ul>
<h2 id="边特征">边特征</h2>
<ul>
<li>1</li>
</ul>
<pre><code class="language-python">import torch
import dgl
import pandas as pd
import numpy as np
</code></pre>
<pre><code class="language-python">net = pd.read_csv(&quot;net.csv&quot;, index_col=0)
new_net = pd.DataFrame(columns=[&quot;TF&quot;, &quot;TG&quot;])
seq_feat_tf = pd.read_csv(&quot;tf_seqFeat.csv&quot;, index_col=0)
seq_feat_tg = pd.read_csv(&quot;tg_seqFeat.csv&quot;, index_col=0)
clean_gene = pd.concat([seq_feat_tf, seq_feat_tg]).index # 有效基因，删掉了非编码蛋白的基因，这类基因无法计算序列特征

for i in range(net.shape[0]):
    if (net.iloc[i,0] in clean_gene) &amp; (net.iloc[i, 1] in clean_gene):
        new_net.loc[len(new_net.index)] = [net.iloc[i,0], net.iloc[i,1]]
net = new_net  # 删掉非编码蛋白基因后的新调控网络
net
</code></pre>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
    .dataframe tbody tr th {
        vertical-align: top;
    }
    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>TF</th>
      <th>TG</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>Os02g0797100</td>
      <td>Os05g0515900</td>
    </tr>
    <tr>
      <th>1</th>
      <td>Os02g0797100</td>
      <td>Os11g0552100</td>
    </tr>
    <tr>
      <th>2</th>
      <td>Os02g0797100</td>
      <td>Os12g0575000</td>
    </tr>
    <tr>
      <th>3</th>
      <td>Os02g0797100</td>
      <td>Os06g0724500</td>
    </tr>
    <tr>
      <th>4</th>
      <td>Os09g0309700</td>
      <td>Os12g0575000</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>1979</th>
      <td>Os07g0640900</td>
      <td>Os12g0588800</td>
    </tr>
    <tr>
      <th>1980</th>
      <td>Os01g0922600</td>
      <td>Os12g0573600</td>
    </tr>
    <tr>
      <th>1981</th>
      <td>Os01g0922600</td>
      <td>Os11g0498600</td>
    </tr>
    <tr>
      <th>1982</th>
      <td>Os03g0315400</td>
      <td>Os06g0196600</td>
    </tr>
    <tr>
      <th>1983</th>
      <td>Os01g0246700</td>
      <td>Os05g0370200</td>
    </tr>
  </tbody>
</table>
<p>1984 rows × 2 columns</p>
</div>
<h2 id="基因编号">基因编号</h2>
<p>在DGL中节点无名称，将基因名与序号一一对应</p>
<pre><code class="language-python">tf = net.loc[:,&quot;TF&quot;]
tg = net.loc[:, &quot;TG&quot;]
gdict = dict()
c = 0
for i in tf:
    if i in gdict.keys():
        pass
    else:
        gdict[i] = c
        c += 1
for i in tg:
    if i in gdict.keys():
        pass
    else:
        gdict[i] = c
        c += 1
print(&quot;总基因数：&quot;+ str(len(gdict)))
print(&quot;TF数：&quot; + str(len(set(tf))))
print(&quot;TG数：&quot; + str(len(set(tg))))
</code></pre>
<pre><code>总基因数：967
TF数：56
TG数：911
</code></pre>
<pre><code class="language-python">net_value = net.values
for i in range(len(net_value)):
    net_value[i][0] = gdict[net_value[i][0]]
    net_value[i][1] = gdict[net_value[i][1]]
net_value = net_value.T.astype(np.int32)
net_value
</code></pre>
<pre><code>array([[  0,   0,   0, ...,  19,  25,   5],
       [ 56,  57,  58, ..., 965, 862, 966]], dtype=int32)
</code></pre>
<h2 id="创建图">创建图</h2>
<pre><code class="language-python">graph = dgl.graph(data=(net_value[0], net_value[1]))
graph.edges()
</code></pre>
<pre><code>(tensor([ 0,  0,  0,  ..., 19, 25,  5]),
 tensor([ 56,  57,  58,  ..., 965, 862, 966]))
</code></pre>
<h2 id="1添加节点特征-染色质开放性特征rp">1.添加节点特征--染色质开放性特征RP</h2>
<pre><code class="language-python">RP = pd.read_csv(&quot;GeneRPFeatures.csv&quot;, index_col=1, header=0).iloc[:,1:5]
rp = np.array([])
for gene, id in gdict.items():
    t = np.array(RP.loc[gene,:])
    rp = np.append(rp, t)
rpf = torch.tensor(rp.reshape(len(gdict), 4))
graph.ndata[&quot;rp&quot;] = rpf
graph.ndata[&quot;rp&quot;]
</code></pre>
<pre><code>tensor([[-0.0640, -0.0274, -0.0365, -0.1546],
        [ 0.4507,  0.2506,  0.3135,  0.6155],
        [ 2.1213,  1.7325,  0.9074,  1.9912],
        ...,
        [ 1.0883,  0.8400,  0.5759,  1.2669],
        [ 2.3729,  1.6867,  1.5536,  2.0209],
        [ 0.2055,  0.3148,  0.5361,  0.2766]], dtype=torch.float64)
</code></pre>
<h2 id="2添加节点特征-基因序列特征">2.添加节点特征--基因序列特征</h2>
<pre><code class="language-python">seq_feat_tf = pd.read_csv(&quot;tf_seqFeat.csv&quot;, index_col=0)
seq_feat_tg = pd.read_csv(&quot;tg_seqFeat.csv&quot;, index_col=0)
seq_feat = pd.concat([seq_feat_tf, seq_feat_tg])

sf = np.array([])
for gene, id in gdict.items():
    t = np.array(seq_feat.loc[gene,:])
    sf = np.append(sf, t)
sff = torch.tensor(sf.reshape(len(gdict), 120))
graph.ndata[&quot;seqFeat&quot;] = sff
graph.ndata[&quot;seqFeat&quot;]
</code></pre>
<pre><code>tensor([[0.1522, 0.1252, 0.3796,  ..., 0.0660, 0.0430, 0.0340],
        [0.2863, 0.2341, 0.2173,  ..., 0.0620, 0.0560, 0.0530],
        [0.1117, 0.1099, 0.3997,  ..., 0.0465, 0.0320, 0.0235],
        ...,
        [0.1292, 0.1395, 0.3747,  ..., 0.0590, 0.0550, 0.0530],
        [0.2026, 0.2048, 0.3181,  ..., 0.0600, 0.0830, 0.0730],
        [0.2000, 0.1956, 0.2489,  ..., 0.0410, 0.0390, 0.0295]],
       dtype=torch.float64)
</code></pre>
<h2 id="3添加节点特征-基因表达特征">3.添加节点特征--基因表达特征</h2>
<pre><code class="language-python">expr = pd.read_csv(&quot;cpm_clean_expr_calMean.csv&quot;, index_col=0).iloc[:,-6:]

exprFeat = []
for gene, id in gdict.items():
    exprFeat.append(list(expr.loc[gene,:]))
exprF = torch.tensor(exprFeat).to(torch.float64)

graph.ndata[&quot;exprF&quot;] = exprF
graph.ndata[&quot;exprF&quot;]
</code></pre>
<pre><code>tensor([[1.6853e+00, 2.5214e+00, 4.4554e-02, 3.9779e+00, 1.5837e+00, 1.2066e+00],
        [1.7418e+02, 1.7291e+02, 4.1884e+01, 1.4665e+02, 1.2644e+02, 5.5593e+01],
        [3.2703e+01, 5.2835e+01, 1.8378e+02, 3.8498e+01, 2.8865e+01, 1.6740e+01],
        ...,
        [2.7613e+01, 8.7953e+01, 1.2520e+02, 6.6672e+01, 7.1486e+01, 2.3273e+01],
        [9.5840e+00, 2.0126e+01, 3.7542e+00, 1.9665e+01, 1.9616e+01, 7.9439e+00],
        [5.8930e+00, 4.1931e+00, 5.1596e+00, 3.7221e+00, 4.2511e+00, 8.7424e+00]],
       dtype=torch.float64)
</code></pre>
<h2 id="增加边特征-全为1">增加边特征--全为1</h2>
<pre><code class="language-python">y = torch.ones((graph.num_edges(), 1))
graph.edata[&quot;y&quot;] = y
</code></pre>
<h2 id="保存图到文件">保存图到文件</h2>
<pre><code class="language-python">dgl.save_graphs(&quot;GRN_2.bin&quot;, graph)
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Jupyte安装不完全指北]]></title>
        <id>https://shengtudai2.github.io/post/jupyter-Install/</id>
        <link href="https://shengtudai2.github.io/post/jupyter-Install/">
        </link>
        <updated>2022-08-02T08:34:01.000Z</updated>
        <content type="html"><![CDATA[<h3 id="1创建虚拟环境安装jupyter">1.创建虚拟环境，安装jupyter</h3>
<pre><code class="language-bash">conda create -n graph python=3.8  # 创建虚拟环境
conda activate graph
python -m pip install --upgrade pip
conda install ipython  # 安装ipython
conda install jupyter  # 安装jupyter
jupyter notebook --generate-config  # 生成配置文件
</code></pre>
<h3 id="2输入ipython配置密码">2.输入<code>ipython</code>配置密码</h3>
<pre><code class="language-python">from notebook.auth import passwd
passwd()
# 输入两次密码
# 输出内容保存好
# Out[2]: 'argon2:$argon2id$v=19$m=10240,t=10,p=8$EHhduPvNwGdI0dHo5dgQDg$0rEs3/blaFD5xv/bb+NhU1'
exit
</code></pre>
<h3 id="3修改配置文件">3.修改配置文件</h3>
<pre><code class="language-bash">vim /home/hgdai/.jupyter/jupyter_notebook_config.py
</code></pre>
<p>编辑以下内容：</p>
<pre><code class="language-shell">c.NotebookApp.ip='*' #设置访问notebook的ip，*表示所有IP，这里设置ip为都可访问
c.NotebookApp.password=u'argon2:$argon2id$v=19$m=10240,t=10,p=8$EHhduPvNwGdI0dHo5dgQDg$0rEs3/blaFD5xv/bb+NhU1'#填写刚刚生成的密文
c.NotebookApp.open_browser = False # 禁止notebook启动时自动打开浏览器
c.NotebookApp.port =8888 #指定访问的端口，默认是8888
</code></pre>
<p>启动jupyter</p>
<p><code>nohup jupyter notebook --allow-root &gt; jupyter.log 2&gt;&amp;1 &amp;</code></p>
<h3 id="4增加删除jupyter内核">4.增加/删除jupyter内核</h3>
<pre><code class="language-shell"># 以下步骤在需要添加的python环境下操作
pip install ipykernel
python -m ipykernel install --user --name='graph-python38' --display-name='graph-python38'
# --name 设置环境名，随便起名，在 jupyter kernelspec list 命令查看所有环境时显示该名
# --display-name 设置内核展示的名字，在jupyter网页上选择内核时显示的名字
# jupyter kernelspec remove [name] 删除某个内核
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[networkx创建图并添加特征]]></title>
        <id>https://shengtudai2.github.io/post/networksx/</id>
        <link href="https://shengtudai2.github.io/post/networksx/">
        </link>
        <updated>2022-08-01T09:33:44.000Z</updated>
        <content type="html"><![CDATA[<h1 id="networkx创建图并添加特征">networkx创建图并添加特征</h1>
<hr>
<p>基因调控网络图，985个节点，2024条边，每个节点暂时包括两类特征：</p>
<ol>
<li>染色质开放性特征RP<sub>985×4</sub></li>
<li>基因序列特征SeqFeat<sub>985×120</sub></li>
</ol>
<pre><code class="language-python">import networkx as nx
import matplotlib.pyplot as plt
import pandas as pd
DG = nx.DiGraph()
# net.csv edges文件，包括所有TF和TG的边信息和节点名称
with open(&quot;../data/net.csv&quot;, &quot;r&quot;) as net:
    nw = net.readlines()[1:]
edges = []
for t in nw:
    t = t.replace('&quot;','').strip().split(',')
    edges.append((t[1], t[2]))
DG.add_edges_from(edges)
</code></pre>
<h2 id="添加节点特征-基因序列特征">添加节点特征--基因序列特征</h2>
<pre><code class="language-python">tf = pd.read_csv(&quot;tf_seqFeat.csv&quot;,header=0, index_col=0)
tg = pd.read_csv(&quot;tg_seqFeat.csv&quot;, header=0, index_col=0)

for i in range(tf.shape[0]):
    DG.add_node(tf.index[i], seqFeats=list(tf.iloc[i,:]))
for j in range(tg.shape[0]):
    DG.add_node(tg.index[j], seqFeats=list(tg.iloc[j,:]))
</code></pre>
<h2 id="添加节点特征-基因染色质开放性特征">添加节点特征--基因染色质开放性特征</h2>
<pre><code class="language-python">rp = pd.read_csv(&quot;GeneRPFeatures.csv&quot;, header=0, index_col='gene_id')
rp = rp.iloc[:,1:]
for node in DG.nodes():
    DG.add_node(node, RP=list(rp.loc[node,:]))
</code></pre>
<h2 id="添加节点特征-基因表达特征">添加节点特征--基因表达特征</h2>
<pre><code class="language-python">expr = pd.read_csv(&quot;cpm_clean_expr_calMean.csv&quot;, index_col=0)
expr = expr.iloc[:,-6:]
for node in DG.nodes():
    DG.add_node(node, expr=list(expr.loc[node,:]))
</code></pre>
<h2 id="图结构保存与加载">图结构保存与加载</h2>
<p>NetworkX支持许多流行的格式，如边缘列表、邻接列表、GML、GraphML、PICLE、LEDA等<br>
这里采用gml格式保存: <code>nx.write_gml(path.to.save)</code><br>
图的加载与保存对应: <code>nx.read_gml(path.to.read)</code></p>
<pre><code class="language-python">nx.write_gml(DG, &quot;GRN_networkx.gml&quot;)
# g2 = nx.read_gml(&quot;GRN_networkx.gml&quot;)
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[一些有趣的小项目]]></title>
        <id>https://shengtudai2.github.io/post/yi-xie-you-qu-de-xiao-xiang-mu/</id>
        <link href="https://shengtudai2.github.io/post/yi-xie-you-qu-de-xiao-xiang-mu/">
        </link>
        <updated>2022-08-01T05:28:27.000Z</updated>
        <content type="html"><![CDATA[<h3 id="cyclegan网络实现文本风格迁移-链接">CycleGAN网络实现文本风格迁移  <a href="https://github.com/shengtudai2/lxGenerator">链接</a></h3>
<h3 id="有赞微商城虚拟商品类秒杀脚本-链接">有赞微商城虚拟商品类秒杀脚本 <a href="https://github.com/shengtudai2/youzanSeckill">链接</a></h3>
]]></content>
    </entry>
</feed>